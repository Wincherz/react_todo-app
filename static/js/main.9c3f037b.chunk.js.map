{"version":3,"sources":["components/TodoListItem/TodoListItem.js","components/TodoList/TodoList.js","components/FilterListItem/FilterListItem.js","components/FilterList/FilterList.js","App.js","index.js"],"names":["TodoListItem","task","status","id","deleteItem","switchTaskStatus","checked","className","classNames","type","onChange","e","htmlFor","onClick","TodoList","list","map","item","key","title","FilterListItem","currentFilter","filterCurrentValue","href","selected","FilterList","listItems","App","state","todosLength","inputText","prevId","allTodos","addNewTask","preventDefault","trim","setState","prev","length","changeInput","target","value","str","changeAllItemsCallback","newItem","changeAllItems","count","deleteItemList","filter","counterItemsLeft","clearCompleted","todos","this","counter","toLowerCase","onSubmit","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c3f037b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoListItem.scss';\n\nexport const TodoListItem = ({\n  task,\n  status,\n  id,\n  deleteItem,\n  switchTaskStatus,\n  checked,\n}) => (\n  <li\n    className={classNames(status)}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={`todo-${id}`}\n        checked={checked}\n        onChange={e => switchTaskStatus(id)}\n      />\n      <label\n        htmlFor={`todo-${id}`}\n      >\n        {task}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteItem(id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoListItem.propTypes = {\n  task: PropTypes.string.isRequired,\n  status: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n  switchTaskStatus: PropTypes.func.isRequired,\n  checked: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport { TodoListItem } from '../TodoListItem/TodoListItem';\n\nexport const TodoList = ({ list, deleteItem, switchTaskStatus }) => (\n  <ul className=\"todo-list\">\n    {list.map(item => (\n      <TodoListItem\n        key={item.id}\n        id={item.id}\n        task={item.title}\n        status={item.status}\n        checked={item.checked}\n        deleteItem={deleteItem}\n        switchTaskStatus={switchTaskStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteItem: PropTypes.func.isRequired,\n  switchTaskStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FilterListItem.scss';\nimport classNames from 'classnames';\n\nexport const FilterListItem = ({ item, currentFilter, filterCurrentValue }) => (\n  <li>\n    <a\n      href={item.href}\n      className={classNames({ selected: item.title === currentFilter })}\n      onClick={() => filterCurrentValue(item.title)}\n    >\n      {item.title}\n    </a>\n  </li>\n);\n\nFilterListItem.propTypes = {\n  item: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    href: PropTypes.string.isRequired,\n  }).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  filterCurrentValue: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FilterList.scss';\nimport { FilterListItem } from '../FilterListItem/FilterListItem';\n\nexport const FilterList = (\n  {\n    listItems,\n    currentFilter,\n    filterCurrentValue,\n  },\n) => (\n  <ul className=\"filters\">\n    {listItems.map(item => (\n      <FilterListItem\n        item={item}\n        key={item.title}\n        filterCurrentValue={filterCurrentValue}\n        currentFilter={currentFilter}\n      />\n    ))}\n  </ul>\n);\n\nFilterList.propTypes = {\n  filterCurrentValue: PropTypes.func.isRequired,\n  listItems: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    href: PropTypes.string,\n  })).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { FilterList } from './components/FilterList/FilterList';\n\nconst listItems = [\n  {\n    href: '#/',\n    title: 'All',\n  },\n  {\n    href: '#/active',\n    title: 'Active',\n  },\n  {\n    href: '#/completed',\n    title: 'Completed',\n  },\n];\n\nclass App extends Component {\n  state = {\n    todosLength: 0,\n    inputText: '',\n    prevId: 0,\n    allTodos: [],\n    currentFilter: 'All',\n  }\n\n  addNewTask = (e) => {\n    e.preventDefault();\n\n    if (this.state.inputText.trim() === '') {\n      this.setState({\n        inputText: '',\n      });\n    } else {\n      this.setState(prev => ({\n        allTodos: [\n          ...prev.allTodos,\n          {\n            id: prev.prevId + 1,\n            title: prev.inputText.trim(),\n            status: 'active',\n            checked: false,\n          },\n        ],\n        prevId: prev.prevId + 1,\n        inputText: '',\n        todosLength: prev.allTodos.length + 1,\n      }));\n    }\n  }\n\n  changeInput = (e) => {\n    this.setState({\n      inputText: e.target.value,\n    });\n  }\n\n  filterCurrentValue = (str) => {\n    this.setState({\n      currentFilter: str,\n    });\n  }\n\n  changeAllItemsCallback = (status, checked) => {\n    this.setState(prev => ({\n      allTodos: prev.allTodos.map((item) => {\n        const newItem = { ...item };\n\n        newItem.status = status;\n        newItem.checked = checked;\n\n        return newItem;\n      }),\n    }));\n  }\n\n  changeAllItems = (count) => {\n    if (!count) {\n      this.changeAllItemsCallback('active', false);\n    } else {\n      this.changeAllItemsCallback('completed', true);\n    }\n  }\n\n  deleteItemList = (id) => {\n    this.setState(prev => ({\n      allTodos: prev.allTodos.filter(item => item.id !== id),\n    }));\n  }\n\n  counterItemsLeft = () => (\n    this.state.allTodos.filter(item => item.status === 'active').length\n  )\n\n  switchTaskStatus = (id) => {\n    this.setState(prev => ({\n      allTodos: prev.allTodos.map((item) => {\n        const newItem = { ...item };\n\n        if (item.id === id) {\n          newItem.status = item.status === 'completed' ? 'active' : 'completed';\n          newItem.checked = !item.checked;\n        }\n\n        return newItem;\n      }),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prev => ({\n      allTodos: prev.allTodos.filter(item => item.status === 'active'),\n    }));\n  }\n\n  render() {\n    let todos = [...this.state.allTodos];\n    const counter = this.counterItemsLeft();\n    const {\n      todosLength,\n      inputText,\n      currentFilter,\n    } = this.state;\n\n    if (currentFilter !== 'All') {\n      todos = this.state.allTodos.filter(item => (\n        item.status === currentFilter.toLowerCase()\n      ));\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.addNewTask}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.changeInput}\n              value={inputText}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={!counter && todos.length}\n            onChange={() => this.changeAllItems(counter)}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          {!!todosLength && (\n            <TodoList\n              list={todos}\n              deleteItem={this.deleteItemList}\n              switchTaskStatus={this.switchTaskStatus}\n            />\n          )}\n\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${counter} items left`}\n          </span>\n\n          <FilterList\n            listItems={listItems}\n            currentFilter={currentFilter}\n            filterCurrentValue={this.filterCurrentValue}\n          />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}